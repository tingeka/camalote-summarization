{"version":3,"file":"index.js","mappings":"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","sources":["webpack://camalote-summarization/./src/edit.js","webpack://camalote-summarization/./src/utils.js","webpack://camalote-summarization/./src/editor.scss","webpack://camalote-summarization/external window \"React\"","webpack://camalote-summarization/external window [\"wp\",\"blockEditor\"]","webpack://camalote-summarization/external window [\"wp\",\"blocks\"]","webpack://camalote-summarization/external window [\"wp\",\"coreData\"]","webpack://camalote-summarization/external window [\"wp\",\"data\"]","webpack://camalote-summarization/external window [\"wp\",\"element\"]","webpack://camalote-summarization/external window [\"wp\",\"i18n\"]","webpack://camalote-summarization/webpack/bootstrap","webpack://camalote-summarization/webpack/runtime/compat get default export","webpack://camalote-summarization/webpack/runtime/define property getters","webpack://camalote-summarization/webpack/runtime/hasOwnProperty shorthand","webpack://camalote-summarization/webpack/runtime/make namespace object","webpack://camalote-summarization/./src/index.js"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Imports the useBlockProps and InnerBlocks components from the\n * @wordpress/block-editor package.\n *\n * useBlockProps is a React hook that provides props for the block wrapper element.\n *\n * InnerBlocks renders the inner block content of a custom block.\n */\nimport { useBlockProps, InnerBlocks } from \"@wordpress/block-editor\";\n\n/**\n * Imports the editor stylesheet.\n *\n * This allows us to style the editor UI for this block.\n */\nimport './editor.scss';\n\n/**\n * Imports the useEntityProp hook from the @wordpress/core-data package.\n *\n * This hook allows you to get and set entity properties in the core data store.\n */\nimport { useEntityProp } from \"@wordpress/core-data\";\n\n/**\n * Imports the useSelect and useDispatch hooks from the @wordpress/data package.\n *\n * useSelect allows you to select data from the store state.\n *\n * useDispatch returns the store dispatch method to dispatch actions.\n */\nimport { useSelect, useDispatch } from \"@wordpress/data\";\n\n/**\n * Imports the useState and useEffect React hooks from the @wordpress/element package.\n *\n * useState allows you to add state to a functional component.\n * useEffect allows you to perform side effects from a function component.\n */\nimport { useState, useEffect } from \"@wordpress/element\";\n\n/**\n * Imports the createBlocksFromInnerBlocksTemplate utility from\n * @wordpress/blocks to generate blocks from a template array.\n */\nimport { createBlocksFromInnerBlocksTemplate } from \"@wordpress/blocks\";\n\n/**\n * Imports utility functions from the utils.js file:\n *\n * paragraphTemplate - Template for paragraph inner blocks.\n * formatPostContent - Formats post content for API request.\n * getInnerBlocksContent - Gets inner block HTML content.\n * makeApiCall - Makes API call to summarization endpoint.\n */\nimport {\n\tparagraphTemplate,\n\tformatPostContent,\n\tgetInnerBlocksContent,\n\tmakeApiCall,\n} from \"./utils.js\";\n\n/**\n * Imports the API endpoint\n */\nimport apiEndpoint from './endpoint.json';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @return {Element} Element to render.\n */\n\n/**\n * Edit function for the Summarization block.\n *\n * Retrieves post content and inner block content.\n * Makes API call to generate summary.\n * Updates meta field and inner blocks with summary.\n * Handles button states and re-summarization.\n */\nexport default function Edit(\n\t{\n\t\tclientId,\n\t\tname,\n\t\tcontext: { postType },\n\t}\n) {\n\t/* These lines of code are using the `useSelect` and `useDispatch` hooks from the `@wordpress/data`\n\tpackage to retrieve and update data from the WordPress editor. */\n\tconst { getEditedPostContent } = useSelect((select) => select(\"core/editor\"));\n\tconst { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n\n\t/* The `getInnerBlocksContent(clientId)` function is retrieving the content of the inner blocks within\n\tthe current block. It takes the `clientId` as a parameter, which is a unique identifier for the\n\tcurrent block, and returns the content of the inner blocks as a string. This content is then stored\n\tin the `innerBlocksContent` variable. */\n\tconst innerBlocksContent = getInnerBlocksContent(clientId);\n\n\t/* The line `const postContent = getEditedPostContent();` is retrieving the content of the currently\n\tedited post in the WordPress editor. It uses the `getEditedPostContent` function from the\n\t`@wordpress/data` package to get the content. The `postContent` variable will store the retrieved\n\tcontent. */\n\tconst postContent = getEditedPostContent();\n\n\t/* The code is using the `useEntityProp` hook from the `@wordpress/core-data` package to get and update\n\tthe meta value of a post. */\n\tconst [ meta, setMeta ] = useEntityProp( 'postType', postType, 'meta' );\n\tconst metaValue = meta[ 'myguten_meta_block_field'];\n\t\n\t/**\n\t * The function `updateMetaValue` updates the value of a meta field called `myguten_meta_block_field`\n\t * with a new value.\n\t * @param newValue - The `newValue` parameter is the new value that you want to update for the\n\t * `myguten_meta_block_field` property in the `meta` object.\n\t */\n\tconst updateMetaValue = ( newValue ) => {\n\t\tsetMeta( { ...meta, myguten_meta_block_field: newValue } );\n\t};\n\n\t/* The code is using the `useState` hook to create three state variables: `buttonText`,\n\t`buttonDisabled`, and `updatingData`. */\n\tconst [buttonText, setButtonText] = useState( () => metaValue.length > 0 ? 'Regenerar resumen' : 'Generar resumen' );\n    const [buttonDisabled, setButtonDisabled] = useState(false);\n\tconst [updatingData, setUpdatingData] = useState(false);\n\n\t/* The `useEffect` hook is used to perform side effects in a functional component. In this case, the\n\t`useEffect` hook is being used to update the meta value of a post when the `updatingData` or\n\t`innerBlocksContent` variables change. */\n\tuseEffect(() => {\n\t  if (!updatingData) {\n\t\tupdateMetaValue( innerBlocksContent );\n\t  }\n\t}, [updatingData, innerBlocksContent])\n\t\n\t/**\n\t * The function `handleApiCall` is used to make an API call, update the meta value, and replace inner\n\t * blocks with new content.\n\t * @returns The function `handleApiCall` does not have a return statement, so it does not explicitly\n\t * return anything.\n\t */\n\tconst handleApiCall = async () => {\n\n\t\tsetButtonText('Generando resumen');\n\t\tsetButtonDisabled(true);\n\t\tsetUpdatingData(true);\n\n\t\tlet body = formatPostContent(postContent, name);\n\t\tlet endpoint = apiEndpoint.endpoint;\n\n\t\tconst response = await makeApiCall(endpoint, body);\n\t\tif (!response.ok) {\n\t\t\tsetButtonText('Intente nuevamente');\n\t\t\tsetButtonDisabled(false);\n\t\t\treturn console.error('API request failed', response)\n\t\t}\n\t\tlet result = await response.json();\n\t\tupdateMetaValue( result );\n\t\treplaceInnerBlocks(\n\t\t\tclientId,\n\t\t\tcreateBlocksFromInnerBlocksTemplate(paragraphTemplate( result ) )\n\t\t);\n\t  \n\t\tsetButtonText( 'Regenerar resumen' );\n\t\tsetButtonDisabled( false );\n\t\tsetUpdatingData( false );\n\t}\n\n\t/* The `return` statement is returning the JSX code that will be rendered in the editor for this\n\tblock. */\n\treturn (\n\t\t<div {...useBlockProps()}>\n\t\t\t<button onClick={handleApiCall} disabled={buttonDisabled}>\n                {buttonText}\n            </button>\n\t\t\t{ metaValue\n\t\t\t&& <InnerBlocks\n\t\t\t\ttemplate={ paragraphTemplate( metaValue ) }\n\t\t\t\tallowedBlocks={ [ 'core/paragraph' ] }\n\t\t\t\ttemplateLock = 'insert'\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t);\n}\n","import { parse, serialize } from '@wordpress/blocks';\nimport { useSelect } from \"@wordpress/data\";\n\n/**\n * Define a template for the paragraph block.\n * \n * @param {Array} result - The array of paragraph block content.\n * @returns {Array} - An array of paragraph blocks.\n */\nexport function paragraphTemplate( result ) {\n\treturn result.map( item => ['core/paragraph', { content: item } ]);\n};\n\n/**\n * Format the post content by parsing, filtering, and serializing.\n * \n * @param {string} postContent - The post content to format.\n * @param {string} name - The block name to filter out.\n * @returns {string} - The formatted post content.\n */\nexport function formatPostContent ( postContent, name ) {\n\tconst parsedPostContent = parse( postContent );\n\tconst filteredPostContent = parsedPostContent.filter( (item) => { return item.name !== name} );\n\tconst serializedPostContent = serialize(filteredPostContent)\n\treturn serializedPostContent.replace( /(<([^>]+)>)/gi, '' );\n};\n\n/**\n * Get the content of inner blocks for the given clientId.\n * \n * @param {string} clientId - The clientId for the block.\n * @returns {Array} - An array of inner block content.\n */\nexport function getInnerBlocksContent(clientId) {\n\treturn useSelect(select => {\n        const block = select('core/block-editor').getBlock(clientId)\n        const blockInnerBlock = block.innerBlocks\n        const blockInnerBlockContent = blockInnerBlock.map(block => block.attributes.content);\n        return filterEmptyBlocks(blockInnerBlockContent);\n\t});\n};\n\n/**\n * Filter out empty blocks from the provided array.\n * \n * @param {Array} block - The array of blocks to filter.\n * @returns {Array} - The filtered array with empty blocks removed.\n */\nexport function filterEmptyBlocks ( block ) {\n    return block.filter((content) => content !== '');\n};\n\n/**\n * The function `makeApiCall` is an asynchronous function that makes a POST request to an API endpoint\n * with a JSON body and returns the response.\n * @param apiEndpoint - The `apiEndpoint` parameter is the URL of the API endpoint that you want to\n * make a request to. It specifies the location where the API is hosted and the specific endpoint you\n * want to interact with.\n * @param body - The `body` parameter is an object that contains the data you want to send to the API\n * endpoint. It will be converted to a JSON string using `JSON.stringify()` before being sent in the\n * request body.\n * @returns the response object from the API call.\n */\nexport async function makeApiCall(apiEndpoint, body) {\n\tconst response = await fetch(apiEndpoint, {\n\t  method: 'POST',\n\t  headers: {\n\t\t'Content-Type': 'application/json',\n\t  },\n\t  body: JSON.stringify(body),\n\t});\n  \n\treturn response;\n}  ","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\nimport metadata from './block.json';\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nregisterBlockType( metadata.name, {\n\t/**\n\t * @see ./edit.js\n\t */\n\tedit: Edit,\n} );\n"],"names":["__","useBlockProps","InnerBlocks","useEntityProp","useSelect","useDispatch","useState","useEffect","createBlocksFromInnerBlocksTemplate","paragraphTemplate","formatPostContent","getInnerBlocksContent","makeApiCall","apiEndpoint","Edit","clientId","name","context","postType","getEditedPostContent","select","replaceInnerBlocks","innerBlocksContent","postContent","meta","setMeta","metaValue","updateMetaValue","newValue","myguten_meta_block_field","buttonText","setButtonText","length","buttonDisabled","setButtonDisabled","updatingData","setUpdatingData","handleApiCall","body","endpoint","response","ok","console","error","result","json","createElement","onClick","disabled","template","allowedBlocks","templateLock","parse","serialize","map","item","content","parsedPostContent","filteredPostContent","filter","serializedPostContent","replace","block","getBlock","blockInnerBlock","innerBlocks","blockInnerBlockContent","attributes","filterEmptyBlocks","fetch","method","headers","JSON","stringify","registerBlockType","metadata","edit"],"sourceRoot":""}